{
  "name": "blade",
  "author": {
    "name": "Blake Miner",
    "email": "miner.blake@gmail.com",
    "url": "http://www.blakeminer.com/"
  },
  "description": "Blade - HTML Template Compiler, inspired by Jade & Haml",
  "keywords": [
    "html",
    "compile",
    "compiler",
    "render",
    "view",
    "template",
    "engine",
    "jade",
    "haml",
    "live binding",
    "meteor"
  ],
  "version": "3.2.7",
  "homepage": "https://github.com/bminer/node-blade",
  "repository": {
    "type": "git",
    "url": "https://github.com/bminer/node-blade.git"
  },
  "license": "MIT",
  "main": "lib/blade.js",
  "bin": {
    "blade": "./bin/blade"
  },
  "dependencies": {
    "uglify-js": ">=2.2.3 || >=1.2 <2",
    "commander": ">=0.6"
  },
  "devDependencies": {
    "pegjs": ">=0.7",
    "uglify-js": ">=2.2.3 || >=1.2 <2"
  },
  "optionalDependencies": {
    "uglify-js": ">=2.2.3 || >=1.2 <2",
    "commander": ">=0.6"
  },
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "pretest": "./lib/parser/build.sh",
    "test": "node ./test/test.js",
    "prepublish": "./lib/parser/build.sh"
  },
  "contributors": [
    {
      "name": "Michel LÃ¶hr",
      "url": "https://github.com/mlohr"
    }
  ],
  "readme": "Blade - HTML Template Compiler\n==============================\n\nBlade is a HTML Template Compiler, inspired by Jade &amp; Haml, implemented in\nJavaScript, so it will run on your microwave oven.\n\nIt works like this...\n\n1. Write up your template in Blade (which is a Jade-like language)\n2. Use the Blade compiler to generate a Blade template (which is a JavaScript function)\n3. Pass variables into your generated template to produce HTML or XML\n\n[View a simple example](#simple-example)\n\nNever write HTML again. Please.\n\n**NOTE:** Users updating to Blade 3.0.0beta5 may notice that [chunk](#chunks) support\nhas been removed.\n\n<img src=\"http://www.empireonline.com/images/features/100greatestcharacters/photos/47.jpg\"\nalt=\"Blade\" width=\"150\" height=\"169\"/>\n\n\"Blade's blood is the key\" :P Sorry... I had to...\n\nThis is *NOT* the Blade templating engine developed by [Laravel](http://laravel.com/).\nLaravel Blade was added in Sept, 2011; whereas, I did not begin development on Blade\nuntil May, 2012. Nevertheless, I still blame Laravel for choosing the same name\nand for creating any confusion. :)\n\nTable of Contents\n-----------------\n\n- [Why use Blade instead of Jade?](#why-use-blade-instead-of-jade)\n- [Features](#features)\n- [Project Status](#project-status)\n- [Installation](#installation)\n- [Language Syntax](#syntax)\n\t- [The Basics](#syntax)\n\t- [Functions](#functions)\n\t- [Dynamic File Includes](#dynamic-file-includes)\n\t- [Blocks](#blocks)\n- [API](#api)\n- [Browser Usage](#browser-usage)\n- [A Simple Example](#simple-example)\n- [Syntax Highlighting](#syntax-highlighting) for your favorite text editor\n- [Plugins](#plugins)\n- [Meteor Support](#meteor-support)\n- [Implementation Details](#implementation-details)\n- [Benchmarks](#benchmarks)\n- [License](#license)\n\nWhy use Blade instead of Jade?\n-----------------------\n\n- Jade is an ornamental stone. Blade is a badass vampire hunter.\n- **Client-side templates** can be served to the browser, no problem.\n\tSee [Browser Usage](#browser-usage) and [Blade Middleware]\n\t(#blademiddlewaresourcepath-options) for more info.\n- **Meteor support** - Blade works well with [Meteor](http://meteor.com/) and Spark.\n\tSee the\t[documentation below](#meteor-support).\n- **Compatibility** - The language syntax of Blade is very similar to Jade's. Jade is\n\tan awesome templating language, and if you are already familiar with it, getting\n\tstarted with Blade should take you very little time.\n- **[Smarter](#fileIncludeDetails) file includes** - \n\tFiles compiled in Blade can be much smaller than Jade files when you are using file\n\tincludes because file includes happen at runtime instead of at compile-time. If you\n\tre-use the same included file across multiple views, the included file does not need to\n\tbe reloaded multiple times.\n- **[Blocks](#blocks) are more flexible.** We removed features from Jade like explicit\n\ttemplate inheritance and then added features like blocks and parameterized blocks.\n\tYou might find our idea of a block to be similar to Jade's, but just wait until you\n\trealize how much more flexible they are.\n- **Just [Functions](#functions), not mixins or partials.** In Blade, there are no \"mixins\"\n\tor partial templates. There are only functions, and they work just like regular JavaScript\n\tfunctions that you've come to know and love. You can put your functions into separate\n\tfiles and include them into other templates, you can take advantage of the `arguments`\n\tArray-like Object, or whatever you want!\n- **Other cool [features](#features)** For example, Blade provides built-in syntax\n\tto capture content rendered by a function and store it into a variable within your\n\tview template. This allows you to pass rendered HTML content to another function.\n\tCheckout the [list of features](#features) below for a more complete list of features\n\n```\n\tJade\t\tvs.\t\tBlade\n```\n<img src=\"http://i.imgur.com/je5Wd.png\" alt=\"Jade\" height=\"169\"/> &nbsp;&nbsp; <img src=\"http://www.empireonline.com/images/features/100greatestcharacters/photos/47.jpg\" alt=\"Blade\" width=\"150\" height=\"169\"/>\n\nOK... it's admittedly not as funny as I thought it would be. But, I tried.\n\nFeatures\n--------\n\n- Write extremely readable [short-hand HTML](#syntax)\n- Insert escaped and unescaped text and vanilla JavaScript code\n- Code and text are escaped by default for security/convenience\n- [Functions](#functions) (like Jade mixins)\n- [Dynamic file includes](#dynamic-file-includes)\n- [Regular blocks](#blocks) and [Parameterized blocks](#parameterized-blocks)\n\t(aids in supporting template inheritance)\n- [True client-side template support](##browser-usage) with caching, etc.\n- Supports Express.JS - just write `app.set(\"view engine\", \"blade\");`\n- [HTML Comments and block comments](#comments)\n- [Text filters](#text-filters)\n- [String interpolation](#interpolation)\n- Nice error reporting to help you debug your broken templates\n- Command-line tool to compile/render templates (try `blade --help`)\n- [Meteor smart package](#meteor-support)\n- Write DOM [event handlers right into your views](#event-handlers)\n- Cool plugins (including [Live UI](https://github.com/bminer/node-blade/wiki/Live-UI-Blade-Plugin))\n\nProject Status\n--------------\n\nI'd say that Blade itself is **stable**. There are very few (if any)\n[known issues](https://github.com/bminer/node-blade/issues), and I think that Blade\nis ready for production environments. I use Blade for many of my projects.\nMeteor support for Blade is still in a **beta** or **release candidate**\nstage until the final release of Blade 3.0.0. Please test Blade with Meteor\nand report any bugs and/or weird behavior.\n\nIf you find a bug, please [report it here]\n(https://github.com/bminer/node-blade/issues). If you include the Blade code\nthat failed along with the expected HTML output, that is always splendid. Full\nstack traces for Errors are quite nice, too.\n\nBy all means, please feel free to submit pull requests for new features,\nnew tests, or whatever! For big changes, say ~100 lines of code, you\nmight want to contact me first or submit an issue before getting started.\n\nInstallation\n------------\n\nfor Node (via npm): `sudo npm install -g blade`\n\nRuntime for Browsers: `wget https://raw.github.com/bminer/node-blade/master/lib/runtime.js`\nMinified runtime is about 7-8 KB, uncompressed.\n\nUsing Blade in a Meteor project? Check out [Meteor support](#meteor-support).\n\nSyntax\n------\n\n### Tags\n\nLike Jade, a tag is simply a word. For example, the string `html` will render to `<html></html>`.\n\nYou can have 'id's:\n\n```\ndiv#awesome\n```\n\nwhich renders as `<div id=\"awesome\"></div>`.\n\nAny number of classes work, separated by a dot (`.`)\n\n```\ndiv.task-details.container\n```\n\nwhich renders as `<div class=\"task-details container\"></div>`.\n\nTag attributes?  Yep, they work pretty much like Jade, too.  Even string [interpolation]\n(#interpolation) works.\nPut attributes in parenthesis, separate attributes with a comma, space, newline, or whatever.\n\n`a(href=\"/homepage\", onclick=\"return false;\")` renders as:\n\n```html\n<a href=\"/homepage\" onclick=\"return false;\"></a>\n```\n\nYou can also have line feeds or weird whitespace between attributes, just like in Jade.\nWhatever. This works, for example:\n\n```\ninput(\n\t\ttype=\"text\"\n\t\tname=\"email\"\n\t\tvalue=\"Your email here\"\n\t)\n```\n\nYou can also put substitute an attribute value with vanilla JS code like this:\n`input(type=\"text\" name=\"contact-\"+name value=value)`.  For example, if you passed the object\n`{name: \"fred\", value: \"testing\"}` to your view, the above would render to:\n`<input type=\"text\" name=\"contact-fred\" value=\"testing\"/>`\n\nYou cannot put whitespace, commas, newlines, or parentheses in the vanilla JavaScript code,\nthough. Blade uses these characters to separate each attribute or to end the tag definition.\n\nAnd, yes... the `class` attribute is handled with extra special care. Pass an array or string.\nClasses (delimited by \".\") from before will be merged with the value of the `class` attribute.\n\nFor example:\n\n`div#foo.bar.dummy(class=\"another dude\")` renders as: `<div id=\"foo\" class=\"bar dummy another dude\"></div>`\n\nBoolean attributes are allowed, as well. If the attribute value is boolean `true`, then\nthe attribute is set; if the attribute value is boolean `false`, then the attribute is\nignored entirely.  For example:\n\n`input(type=\"text\" checked=true)` renders as: `<input type=\"text\" checked=\"checked\"/>`.\n\nOr... you can write it [HTML 5 style](http://dev.w3.org/html5/html-author/#empty-attr) like this:\n\n`input(type=\"text\" checked)` which renders as: `<input type=\"text\" checked=\"checked\"/>`.\n\ndiv, div, div can get annoying... so, we can omit the tag specifier if we specify an\nid or some classes:\n\n```\n#foo\n.bar\n#this.is.cool\n```\n\nrenders as:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div><div id=\"this\" class=\"is cool\"></div>\n```\n\nBlade just assumes anything without a tag name specifier is a `<div>` tag.\n\nAlso, tags without matching ending tags like `<img/>` render properly.\n\n#### Escaping Blade keywords\n\nFinally, you can start a tag name with a bashslash to escape Blade keywords.\nNormally, `include test` would include a file, but `\\include test` renders as:\n\n```xml\n<include>test</include>\n```\n\nThis allows you to be flexible with tag names, so you are not restricted to rendering\nHTML, for example. You can render any XML document with Blade.\n\n### Indenting\n\nSimply intent to put content inside of a tag.\n\nYou can indent with any number of spaces or with a single tab character. The\nonly rule is to be consistent within a given file.\nJade gives you a lot of weird indent flexibility. Blade, by design, does not.\n\n```\nhtml\n\thead\n\t\ttitle Welcome\n\tbody\n\t\t#content\n```\n\nrenders as:\n\n```html\n<html>\n\t<head>\n\t\t<title>Welcome</title>\n\t</head>\n\t<body>\n\t\t<div id=\"content\"></div>\n\t</body>\n</html>\n```\n\n### Text\n\nSimply place content after the tag like this:\n\n```\np This text is \"escaped\" by default. Kinda neat.\n```\n\nrenders as:\n\n```html\n<p>This text is &quot;escaped&quot; by default. Kinda neat.</p>\n```\n\nWant unescaped text?  Large blocks of text? Done.\nStart a line of text with a `|`.\n\n```\np! This will be <strong>unescaped</strong> text.\n\t|\n\t\tHow about a block? (this is \"escaped\", btw)\n\t\tYep. It just works!\n\t\tNeato.\n```\n\nrenders as:\n\n```html\n<p>This will be <strong>unescaped</strong> text.\nHow about a block? (this is &quot;escaped&quot;, btw)\nYep. It just works!\nNeato.</p>\n```\n\nRules are:\n\n- Text is escaped by default.\n- Want unescaped text? Precede with a `!`\n- Precede with a `=` to evaluate and output some JavaScript.\n- Large text block? Use `|` and indent properly.\n- Unescaped text block? Use `|!` or even just `!` works.\n- JavaScript code block? Use `|=` or even just `=` works.\n- Unescaped JavaScript code block? Yep. Use `|!=` or `!=`.\n- Newlines in text blocks are preserved.\n\n<a name=\"interpolation\"></a>\nString interpolation is supported for text blocks (and text attributes and text filters).\nUse `#{var_name}` notation, and anything between the curly braces is treated as\nvanilla JavaScript code.\n\nFor example, you can write:\n\n(caution: indents are **required** on line 4 even though it is blank)\n\n```\np\n\t|\n\t\tI am just testing #{whatever + \", alright?\"}\n\t\t\n\t\tRelax...\n```\n\ninstead of writing the equivalent, but arguably less awesome...\n\n```\np\n\t|=\n\t\t\"I am just testing \" + whatever + \", alright?\" +\n\t\t\"\\n\\n\" +\n\t\t\"Relax...\"\n```\n\nAssuming a local variable `whatever` is passed to the template with value \"Blade\",\nboth of the examples above will render to this:\n\n```html\n<p>I am just testing Blade, alright?\n\nRelax...</p>\n```\n\nInterpolation comes in two forms: escaped and unescaped.  If you want escaped (i.e.\nthe resulting string has &gt; &lt; &quot; and other HTML characters escaped), use\n`#{foo}`; if you want unescaped, use `!{foo}`.  If you literally want to insert\n\"#{foo}\" in your text, just prepend with a backslash like this: `\\#{foo}`.\n\n#### Whitespace between tags\n\nIn Blade, whitespace is only added when it's explicitly needed.\nFor example:\n\n```blade\ninput(type=\"text\")\ninput(type=\"text\")\n```\n\nrenders as: `<input type=\"text\"><input type=\"text\">`\n\nIf you need something like...\n`<input type=\"text\"> <input type=\"text\">` (notice the space between the elements),\nthen you have some options...\n\nOne way is to use a text block:\n\n```blade\ninput(type=\"text\")\n|  \ninput(type=\"text\")\n```\n\nNotice on line 2 that the `|` is followed by **two** spaces.\n\nAnother way is to prepend a tag with a `<`:\n\n```blade\ninput(type=\"text\")\n<input(type=\"text\")\n```\n\nOr append the tagname with a `>`:\n\n```blade\ninput>(type=\"text\")\ninput(type=\"text\")\n```\n\nWhatever you like!\n\n### Text filters\n\nNeed `<br/>` tags inserted? Use a built-in filter, perhaps?\n\n```\np\n\t:nl2br\n\t\tHow about some text with some breaks?\n\t\t\n\t\tYep! It works!\n```\n\nrenders as:\n\n```html\n<p>How about some text with some breaks?<br/><br/>Yep! It works!</p>\n```\n\nBuilt-in text filters include:\n\n- :nl2br - Escapes the content and converts newline characters to `<br/>`\n- :cdata - Surrounds text like this: `<![CDATA[` ...text goes here... `]]>`\n\tText should not contain `]]>`.\n- :markdown (must have [markdown-js](https://github.com/evilstreak/markdown-js) installed)\n- :md (alias for :markdown)\n- :javascript - Generates a `<script>` tag for your JavaScript code. If `minify` compiler\n\toption is set and UglifyJS is installed, your code is uglified automatically.\n- :js (alias for :javascript)\n- :coffeescript - Generates a `<script>` tag for the generated JavaScript.\n\t(must have [coffee-script](https://github.com/jashkenas/coffee-script) installed)\n- :cs (alias for :coffeescript)\n- :stylus - Generates a `<style>` tag for the generated CSS. If `minify` compiler\n\toption is set, your CSS is compressed automatically.\n\t(must have [stylus](https://github.com/LearnBoost/stylus) installed)\n- :less - Generates a `<style>` tag for the generated CSS.\n\t(must have [less](https://github.com/cloudhead/less.js) installed)\n- :sass - Generates a `<style>` tag for the generated CSS.\n\t(must have [sass](https://github.com/visionmedia/sass.js) installed)\n\nFilters are essentially functions that accept a text string and return HTML. They\ncannot modify the AST directly. Also, you cannot inject JavaScript code into\nfilters.\n\nYou can add custom filters at compile-time using the API.\n\nVariable interpolation is supported for certain text filters, as well.  If a text\nfilter returns text in `#{var_name}` or `!{var_name}` notation, then anything\nbetween the curly braces is replaced with vanilla JavaScript code. To avoid this\nbehavior, text filters can either escape the `#{stuff}` with a backslash, or it\ncan set its `interpolation` property to `false`.  See `lib/filters.js` for some\nexamples if you want to write your own filter.\n\n### Code\n\nUse dash (`-`) to indicate that JavaScript code follows, which will not output into\nthe template.  As before, use equals (`=`) to specify code output.  A few examples, please?\n\nUsing dash (`-`):\n\n```\n#taskStatus\n\t- if(task.completed)\n\t\tp You are done. Do more! >:O\n\t- else\n\t\tp Get to work, slave!\n```\n\nWhen inserting lines of code with `-`, curly braces or semicolons are inserted, as\nappropriate.  In the example above, we have an `if` statement followed by an indented\nparagraph tag.  In this case, Blade wraps the indented content with curly braces.\nIf there is no indented content beneath the line of code, then a semicolon is appended\ninstead.\n\nCode that outputs (i.e. a code block or at the end of a tag).\nAs mentioned before, it's just like a text block, except with an `=`.\n\n```\n#taskStatus= task.completed ? \"Yay!\" : \"Awww... it's ok.\"\np\n\t| The task was due on\n\t|= task.dueDate\n```\n\nWhen using code that outputs, the default is to escape all text. To turn off escaping, just\nprepend a \"!\", as before:\n\n```\np\n\t|!= some_var_containing_html\n```\n\nMissing \"|\" characters are okay, too.  Just don't forget that stuff after the \"=\"\nneeds to be valid JavaScript code!\n\n```\np\n\t= \"escape me\" + \" away & away\"\n```\n\nrenders `<p>escape me away &amp; away</p>`\n\n#### Variable names to avoid\n\nBlade, like other template engines, defines local variables within every single view. You\nshould avoid using these names in your view templates whenever possible:\n\n- `locals`\n- `cb`\n- `__` (that's two underscores)\n- Any of the compiler options (i.e. `debug`, `minify`, etc.)\n\n### Doctypes\n\nDon't forget a doctype!  Actually, you can, whatever...\n\nAdd a doctype using the `doctype` keyword or `!!!` like this:\n\n`!!! 5` means use HTML 5 doctype.\n\nUse the list of built-in doctypes or pass your own like this:\n\n```\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\nhtml\n```\n\nwhich renders as `<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"><html></html>`\n\nPut the doctype at the top of your Blade files, please. Please refer to [doctypes.js]\n(https://github.com/bminer/node-blade/blob/master/lib/doctypes.js) for the list of built-in\ndoctypes.\n\nYou can modify the list of built-in doctypes through the API, if you insist.\n\n### Comments\n\nUse `//` for a line comment.  Use `//-` if you don't want the comment to be rendered.\nBlock comments work, too.\n\n```\n//Comment example 1\n//-Comment example 2\n//\n\t#wow\n\tp Block comments work, too\n```\n\nrenders as:\n\n```html\n<!--Comment example 1--><!--<div id=\"wow\"></div><p>Block comments work, too</p>-->\n```\n\nConditional comments work like this:\n\n```\nhead\n\t//if lt IE 8\n\t\tscript(src=\"/dear-microsoft-plz-stop-making-browsers-kthxbye.js\")\n```\n\nrenders as:\n\n```html\n<head><!--[if lt IE 8]><script src=\"/dear-microsoft-plz-stop-making-browsers-kthxbye.js\"></script><![endif]--></head>\n```\n\nTo comment out entire sections of Blade code, you can use non-rendering block comments\nwith a text block.\n\n```\n//-\n\t|\n\t\tanything can go here... Blade code, JavaScript code, whatever...\n\t\tjust make sure that the indenting is right.\n```\n\nor... even better... just use C-style block comments.  Begin with `/*` to generate\na non-rendering block comment, or begin with `/**` to generate a regular comment.\nEnd the comment with `*/`.  These comments are not parsed like `//` comments.\n\n```\n/* h1 Testing */\n/**\n#header\n\th3 Notice that this chunk of Blade code is not parsed\n*/\n```\n\nrenders as:\n\n```html\n<!--\n#header\n\th3 Notice that this chunk of Blade code is not parsed\n-->\n```\n\n### Foreach\n\nThe exact syntax of a foreach region is the word \"foreach\", followed by the variable\nname of the JavaScript Array or [Cursor Object](http://docs.meteor.com/#observe),\noptionally followed by \"as\" and an item alias.  Finally, it is possible to follow the\nforeach region by an \"else\" block, which is only rendered if there were no items in the\ncollection.\n\nAs a side note, a Cursor Object, as described above, is an Object with an `observe()`\nmethod, as described by [`cursor.observe(callbacks)`](http://docs.meteor.com/#observe)\n\nFor example:\n\n```\nul\n\tforeach users as user\n\t\tli #{user.firstName} #{user.lastName} (#{user.age})\n\telse\n\t\tli No users were found\n```\n\nAssuming that `users` is an Array, the above would produce the same as:\n\n```\nul\n\t- for(var i = 0; i < users.length; i++)\n\t\t- var user = users[i];\n\t\tli #{user.firstName} #{user.lastName} (#{user.age})\n\t- if(users.length == 0)\n\t\tli No users were found\n```\n\nThe foreach region is preferred over the example above not only because of readability\nand brevity, but because it also provides Blade with the ability to better integrate\nwith live page updating engines (specifically [Meteor](http://www.meteor.com/) and \n[Spark](https://github.com/meteor/meteor/wiki/Spark)).\nThat is, if the live page update engine supports tracking reactive collections, the most\nefficient DOM operations may occur to update the view's results in-place, without\nre-rendering the entire Blade template.\n\nBlocks don't work well inside of foreach regions.  Specifically, while inside of a\nforeach region: (1) you cannot access blocks declared outside of the foreach region;\nand (2) blocks declared inside of the foreach region are not accessible once you leave\nthe foreach region. If this causes a problem, just use regular JavaScript for loops.\n\n### Event Handlers\n\nYou can write inline event handlers right into your Blade templates.\nHere's an example:\n\n```\nform(method=\"post\" action=\"/login\")\n\tinput(type=\"text\" name=\"username\")\n\t\t{change}\n\t\t\t//javascript code goes here\n\t\t\t//e refers to the browser's event Object\n\t\t\t//e.currentTarget refers to this DOM element\n\t\t\tvalidate(e.currentTarget.value);\n\tinput(type=\"password\" name=\"password\")\n\t\t{change}\n\t\t\tcheckPasswordStrength(this.value);\n```\n\nThe above code will automatically register the 'onchange' event handler with\nthe corresponding `input` tags.\n\nAs shown in the example, your event handler may reference `e` (the browser's\nevent Object). Be aware that every browser's event Object might be slightly\ndifferent, especially in legacy browsers.\n\nIt is also worthwhile to note: If you are rendering the template in the browser\n(i.e. using client-side templates), your event handler will have access to the\nview's locals due to JavaScript closures. This can be rather convenient. :)\n\n### Functions\n\nFunctions are reusable mini-templates. They are similar to 'mixins' in Jade.\n\nDefining a function:\n\n```\nfunction textbox(name, value)\n\tinput(type=\"text\", name=name, value=value)\n```\n\nCalling a function and inserting into template structure:\n\n```\nform\n\tcall textbox(\"firstName\", \"Blake\")\n```\n\nOr... maybe just putting the generated HTML into a variable?\n\n```\ncall textbox(\"firstName\", \"Blake\") > text\n//alternative syntax: call text = textbox(\"firstName\", \"Blake\")\nform\n\t!=text\n```\n\nBoth examples would render:\n\n```html\n<form><input type=\"text\" name=\"firstName\" value=\"Blake\"/></form>\n```\n\nYou can also append content rendered by a function to a variable:\n`call textbox(\"firstName\", \"Blake\") >> text`\n\tor... alternatively...\n`call text += textbox(\"firstName\", \"Blake\")`\n\nNote: when you define a block (see below) within a function, and you output the rendered\ncontent to a variable, the block will be destroyed immediately after the function call.\n\nYes, you can use `arguments` within your function, just like a \"real\" JavaScript function.\nIn fact, functions are \"real\" JavaScript functions, so even closures work! Although, remember\nthat functions have access to the variables in scope at the time the function was defined, not\nthe variables in scope when the function is called.\n\nExample:\n\n```\n- var x = 12;\nfunction test(foo)\n\th1=foo\n\t- if(x)\n\t\tp=x\n#example\n\tcall test(\"Header\")\n```\n\nwould render: `<div id=\"example\"><h1>Header</h1><p>12</p></div>`\n\n#### Adding classes or an id to rendered function content\n\nYes, you can add a class name or id to the first element rendered by a function:\n\n```\nfunction dialog(msg)\n\t.dialog\n\t\t= msg\ncall dialog(\"Blade is awesome\")#foobar.foo.bar\n```\n\nwhich would render as `<div id=\"foobar\" class=\"dialog foo bar\">Blade is awesome</div>`.\n\nAlthough, if you try it with something like this, you get an error because the first\nchild rendered by the function is not a tag.\n\n```\nfunction dialog(msg)\n\t= msg\ncall dialog(\"Blade is awesome\")#foobar.foo.bar\n//compiler might generate an error, or it might just ignore the id and classes\n```\n\n### Dynamic file includes\n\n`include \"file.blade\"`\n\nThis will insert \"file.blade\" right into the current view at runtime, as if the contents\nof the included file were copied right into the current view.\n\nIf you don't know the name of the file to be included until runtime, that's no problem.\nThe include statement can also be followed by the name of a JavaScript variable\ncontaining the filename to be included.  These are called *dynamic filename includes*.\n\n```\n- var filename = \"file.blade\"\ninclude filename\n```\n\n**CAUTION:** When using *dynamic filename includes* in the browser, be sure that you\nhave properly loaded all views that might be included into the browser's cache before\nexecuting the view containing the *dynamic filename include*. See the [implementation\ndetails](#fileIncludeDetails) for a more detailed explanation.\n\nIf you do not specifiy a file extension, `.blade` will be appended to your string\ninternally.\n\nYou may also place an `include` inside of a `function` or `block`.\n\nFinally, you can specify which local variables should be passed to the included view\ntemplate by using the `exposing` keyword.  By default, Blade will pass the parent's\nview locals (not local variables declared with `- var foo = ...`) to the included\ntemplate; however, when using the `exposing` keyword, you can specify exactly which\nvariables (either view locals or variables declared with `- var foo = ...`) are to\nbe exposed to the included template.\n\nFor example:\n\n```\n- header = \"Header: 1, 2, 3\"\n- text = \"This is some text: 1, 2, 3\"\n- for(var i = 0; i < 10; i++)\n\tinclude \"foobar\" exposing i, text\n```\n\nIn the example above, variables `i` and `text` are exposed to \"foobar.blade\";\nthe `header` variable will not be accessible from \"foobar.blade\".\n\nNote: when using Meteor or another live page update engine, [preserve and constant\nregions](#preserve-and-constant-regions) only work properly in an included template\nif and only if the template does *not* define any blocks.  In other words, don't\ninclude a template that declares blocks **and** has some preserve/constant regions.\n\n### Blocks\n\nBlocks allow you to mark places in your template with code that may or may not be\nrendered later.\n\nYou can do a lot with blocks, including template inheritance, etc. They behave quite\ndifferently from Jade.\n\n**STOP!** If you are planning on using blocks with Meteor, beware! First of all,\nblocks might not make much sense when building Meteor applications, and furthermore,\nblocks don't work well with reactive HTML. For more information about why blocks are\nnot recommended for use with Meteor, checkout [this section]\n(https://github.com/bminer/node-blade/wiki/Using-Blade-with-Meteor#wiki-block_limitations)\nof the [Using Blade with Meteor wiki page]\n(https://github.com/bminer/node-blade/wiki/Using-Blade-with-Meteor).\n\nOK. I digress...\n\nThere are two types of blocks: regular blocks and parameterized blocks.\n\n#### Regular blocks\n\nRegular blocks are defined using the \"block\" keyword followed by a block name. Then,\nyou optionally put indented block content below. Like this:\n\n```\nblock regular_block\n\th1 Hello\n\tp This is a test\n```\n\nAssuming nothing else happens to the block, it will be rendered as\n`<h1>Hello</h1><p>This is a test</p>` as expected. Empty blocks are also permitted.\nA simple, empty block looks like this: `block block_name`\n\nOf course, the purpose of declaring/defining a block is to possibly modify it later.\nYou can modify a block using three different commands:\n\n- Use the `append` keyword to append to the matching block.\n- Use the `prepend` keyword to prepend to the matching block.\n- Use the `replace` keyword to replace the matching block.\n\nExample:\n\n```\nappend regular_block\n\tp This is also a test\n```\n\n#### Replacing a block\n\nReplacing a block is somewhat confusing, so I will explain further. If you replace\na block, you are not changing the location of the defined block; you are only\nreplacing the content of the block at its pre-defined location. If you want to change\nthe location of a block, simply re-define a new block ([see below]\n(#what-happens-if-i-define-the-same-block-more-than-once)).\n\nIn addition, when you replace a block, all previously appended and prepended content is\nlost. The behavior is usually desired, but it can sometimes be a source of confusion.\n\nIf you replace a parameterized block (described below) with a regular block, you cannot\ncall \"render\" on that block.\n\nYou can replace a regular block with a parameterized block (described below). This will\nalso clear the contents of the block, as expected.\n\n#### Parameterized blocks\n\nThe other type of block is called a parameterized block, and it looks like this:\n\n```\nblock param_block_yo(headerText, text)\n\th1= headerText\n\tp= text\n```\n\nParameterized blocks do not render automatically because they require parameters.\nTherefore, assuming nothing else happens to the block, the block will not be rendered\nat all.\n\nTo render a block, use the \"render\" keyword like this:\n\n```\nrender param_block_yo(\"Some header text\", 'Some \"paragraph\" text')\n```\n\nNow, assuming nothing else happens to the block, the block will be rendered as:\n\n```html\n<h1>Some header text</h1><p>Some &quot;paragraph&quot; text</p>\n```\n\nYou can `render` as many times as you wish, and by default, the rendered content will\nbe appended to the block. You can also prepend the rendered content to the block or\nreplace the contents of the block with rendered content. Here are the variations:\n\n- `render param_block_yo(\"Some header text\", 'Some \"paragraph\" text')`\n- `render append param_block_yo(\"Some header text\", 'Some \"paragraph\" text')`\n\t(same as above)\n- `render prepend param_block_yo(\"Some header text\", 'Some \"paragraph\" text')`\n- `render replace param_block_yo(\"Some header text\", 'Some \"paragraph\" text')`\n\nParameterized blocks are really cool because regular \"append\", \"prepend\", and \"replace\"\nall work, too. Just remember that order matters.\n\nAnother example:\n\n```\n!!! 5\nhtml\n\thead\n\t\tblock header(pageTitle)\n\t\t\ttitle= pageTitle\n\tbody\n\t\th1 Hello\n\t\trender header(\"Page Title\")\n\t\tappend header\n\t\t\tscript(type=\"text/javascript\")\n\t\trender header(\"Page Title\")\n\t\tprepend header\n\t\t\tmeta\n```\n\nWill output:\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta/>\n\t\t<title>Page Title</title>\n\t\t<script type=\"text/javascript\"></script>\n\t\t<title>Page Title</title>\n\t</head>\n\t<body>\n\t\t<h1>Hello</h1>\n\t</body>\n</html>\n```\n\nObviously, the example above is rather contrived, but it shows how blocks work.\nA more [realistic example of using blocks](#template-inheritance) is below.\n\n#### What happens if I define the same block more than once?\n\nYou can re-define a block that has already been defined with another \"block\"\nstatement. This completely destroys the previously defined block.\nPreviously executed \"append\", \"prepend\", \"replace\", and \"render\" blocks do not affect the\nre-defined block.\n\nIn summary...\n\n- Use the `block` keyword to mark where the block will go (block definition).\n- Use the `render` keyword to render the matching \"parameterized\" block.\n\tDo not use this on a regular block.\n- Use the `append` keyword to append to the matching block.\n- Use the `prepend` keyword to prepend to the matching block.\n- Use the `replace` keyword to replace the matching block.\n\nYou may not render, append to, prepend to, or replace undefined blocks. If you do so,\nan error message will occur.\n\nWhen you define a block within a function, and you output the function's rendered\ncontent to a variable, the defined block will be destroyed immediately after\nthe function call.\n\n### Template Inheritance\n\nThere is no `extends` keyword.  Just use blocks and includes:\n\nlayout.blade:\n\n```\n!!! 5\nhtml\n\thead\n\t\tblock title(pageTitle)\n\t\t\ttitle=pageTitle\n\t\tblock scripts\n\t\t\tscript(type=\"text/javascript\" src=\"/js/jquery.min.js\")\n\t\t\tscript(type=\"text/javascript\" src=\"/js/jquery-ui.min.js\")\n\t\tblock stylesheets\n\tbody\n\t\tblock body\n```\n\nhomepage.blade:\n\n```\ninclude \"layout.blade\"\nrender title(\"Homepage\")\nreplace block body\n\th1 Hello, World\n```\n\nIf you render layout.blade, you get:\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"/js/jquery-ui.min.js\"></script>\n\t</head>\n\t<body></body>\n</html>\n```\n\nbut if you render homepage.blade, you get:\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Homepage</title>\n\t\t<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"/js/jquery-ui.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1>Hello, World</h1>\n\t</body>\n</html>\n```\n\nThe idea here is that you can derive many pages in a website from a basic\ntemplate. In this case, `layout.blade` provides the generic template for\neach page in your website. `homepage.blade` simply uses the layout and\nmodifies some blocks to generate the actual page.\n\n### Preserve and constant regions\n\nPreserve and constant regions are only useful when using a live page update engine.\nAnything in a \"constant\" region is marked by the live page update engine as a\nregion that is not subject to re-rendering.\n\nExample of constant region (using Meteor):\n\n```\n- console.log(\"Rendering header\")\nh1 This is a header\nconstant\n\t- console.log(\"Rendering constant...\")\n\tp The current user is: #{Session.get(\"user\")}\n```\n\nIn the above example, \"Rendering constant...\" will only be printed once to the\nconsole, even if the Session variable changes.\n\n\"Preserve\" regions can be used to preserve certain DOM elements during re-rendering,\nleaving the existing element in place in the document while replacing the surrounding\nDOM nodes.  This means that re-rendering a template need not disturb text fields,\niframes, and other sensitive elements it contains.\n\nExample of preserve region (using Meteor):\n\n```\nform\n\tpreserve {\"input[id]\": function (node) {return node.id;}}\n\t\tlabel First Name\n\t\tinput#firstName(type=\"text\")\n\t\tlabel Last Name\n\t\tinput#lastName(type=\"text\")\n```\n\nThe example above will preserve the `<input>` DOM elements when the template is\nre-rendered. Notice that the code following the \"preserve\" keyword\n`{\"input[id]\": function (node) {return node.id;}}` is passed\ndirectly to the Landmark's \"preserve\" option (see [the Meteor documentation]\n(http://docs.meteor.com/#template_preserve) for more info).\n\nYou must specify how elements in a preserve region are to be preserved. To do\nthis, you need to tell Blade how to uniquely identify each element that you\nwant to preserve in the block. In the example above, `<input>` fields with\n`id` attributes are preserved, and their `id` is used to uniquely identify\nthem.\n\nThe following is an example of preserving a single element. Since there is only one\nelement in this preserve block, identifying it with the `*` selector is acceptable.\n\n```\npreserve [\"*\"]\n\tinput(type=\"text\")\n```\n\nIf the \"preserve\" keyword is not followed by any code, then nothing is preserved.\n\n### Isolates\n\nIsolates are only useful when using a live page update engine. Creating an isolate\nensures that if data dependencies relating only to that isolate are updated, then only\nthe part of the template within isolate will be re-rendered. All other parts of the\nBlade template will *not* be re-rendered.\n\nExample (using Meteor):\n\n```\n- console.log(\"Rendering header...\")\nh1 This is a header\nisolate\n\tp The current user is: #{Session.get(\"user\")}\n```\n\nIn the example above, \"Rendering header...\" will be printed to the console when the\nwhole template is rendered, but if the reactive variable is updated using\n`Session.set(\"user\", ...)`, only the isolate will be re-rendered. In this case,\nnothing will print to the console.\n\nNote: As with Blade functions, any [blocks](#blocks) defined within an isolate will be\ndeleted and unaccessible outside the isolate block.\n\nSee [Reactivity isolation](http://docs.meteor.com/#isolate) on the Meteor documentation\nfor more details.\n\n### Chunks\n\nChunks are *no longer supported* as of Blade 3.0.0beta. You should use\n[isolates](#isolates) instead.\n\nAPI\n---\n\n`var blade = require('blade');`\n\n### blade.compile(string, [options,] cb)\n\nCompiles a Blade template from a string.\n\n- `string` is a string of Blade\n- `options` include:\n\t- `filename` - the filename being compiled (required when using [includes]\n\t\t(#dynamic-file-includes) or the `cache` option)\n\t- `cache` - if true, the compiled template will be cached (defaults to false)\n\t- `debug` - outputs debugging information to the console (defaults to false)\n\t- `minify` - if true, Blade generates a minified template without debugging\n\t\tinformation (defaults to true if `cache` option is set; false, otherwise)\n\t\tIf [UglifyJS](https://github.com/mishoo/UglifyJS) is installed, Blade\n\t\tmay automatically compress or prettify the template depending on whether\n\t\t`minify` is true or false.\n\t- `includeSource` - if true, Blade inserts the Blade source file directly into\n\t\tthe compiled template, which can further improve error reporting, although\n\t\tthe size of the template is increased significantly. (defaults to true if\n\t\tand only if `process.env.NODE_ENV` is \"development\" and minify is false;\n\t\tdefaults to false, otherwise)\n\t- `doctypes` - an Object to specify additional doctypes or overwrite any built-in\n\t\tones. This object is merged with `blade.Compiler.doctypes`\n\t- `selfClosingTags` - Array of self-closing tags to be used instead of\n\t\t`blade.Compiler.selfClosingTags`\n\t- `filters` - an Object to specify additional filters or overwrite any built-in\n\t\tones. This object is merged with `blade.Compiler.filters`\n\t- `templateNamespace` - the name of the reserved variable in the view\n\t\t(defaults to two underscores: __). Other reserved names are\n\t\t[listed here](#variable-names-to-avoid)\n\t- `basedir` - the base directory where Blade templates are located. This option is\n\t\tprimarily used by the Blade middleware to allow the Blade runtime to properly\n\t\tload file includes.\n\t- `middleware` - option reserved for the Blade middleware. Passing `true` tells\n\t\tthe compiler that the template to be compiled is for client-side use, allowing\n\t\tit to mask the basedir (see issue #112 for details).\n- `cb` is a function of the form: `cb(err, tmpl)` where `err` contains\n\tany parse or compile errors and `tmpl` is the compiled template.\n\tIf an error occurs, `err` may contain the following properties:\n\t- `message` - The error message\n\t- `expected` - If the error is a 'SyntaxError', this is an array of expected tokens\n\t- `found` - If the error is a 'SyntaxError', this is the token that was found\n\t- `filename` - The filename where the error occurred\n\t- `offset` - The offset in the string where the error occurred\n\t- `line` - The line # where the error occurred\n\t- `column` - The column # where the error occurred\n\nNote: if there is a problem with the Blade compiler, or more likely, if there\nis a syntax error with the JavaScript code in your template, Node.js will not\nprovide any line number or other information about the error. See issue #40 for\nmore details.\n\nYou can render a compiled template by calling the function: `tmpl(locals, cb)`\n\n- `locals` are the local variables to be passed to the view template\n- `cb` is a function of the form `function(err, html)` where `err` contains\n\t\tany runtime errors and `html` contains the rendered HTML.\n\nIn addition, a compiled template has these properties and methods:\n\n- `template` - a function that also renders the template but accepts 3 parameters:\n\t`tmpl.template(locals, runtime, cb)`. This simply allows you to use a custom\n\truntime environment, if you choose to do so.\n- `filename` - the filename of the compiled template (if provided)\n- `dependencies` - an array of files that might be included by this template at\n\truntime, relative to the path of this template\n- `unknownDependencies` - if true, this template uses *dynamic filename includes*\n\tand may include any file at any time.\n- `reldir` - the path to this template, relative to the base/root path\n- `toString()` - a function that converts the view template function into a string\n\tof JavaScript code. If you need a client-side template for example, you can\n\tuse this function. [UglifyJS](https://github.com/mishoo/UglifyJS) is now used\n\tif you have it installed.\n\n### blade.compileFile(filename, [options,] cb)\n\nAsynchronously compile a Blade template from a filename on the filesystem.\n\n- `filename` is the filename\n- `options` - same as `blade.compile` above, except `filename` option is always\n\toverwritten\twith the `filename` specified. There is also a `synchronous`\n\toption that will tell Blade to read and compile the file synchronously\n\tinstead of asynchronously.\n- `cb` - same as `blade.compile` above\n\n### blade.renderFile(filename, options, cb)\n\nConvenience function to compile a template and render it.\n\n- `filename` is the filename\n- `options` - same as `blade.compileFile` above. This object is also passed\n\tto the view, so it should also contain your view's local variables.\n\tA few [reserved local variables](#variable-names-to-avoid) are removed\n\tbefore passing the locals to the view.\n- `cb` - a function of the form `function(err, html)`\n\n### blade.middleware(sourcePath, options)\n\nExpress middleware for serving compiled client-side templates to the browser.\nFor example, if you visit the URL \"/views/homepage.blade\" on your server, you\ncan compile the view stored at `sourcePath + \"/homepage.blade\"`\n\n- `sourcePath` - the path on the server where your views are stored\n- `options` include:\n\t- `mount` - the URL path where you can request compiled views (defaults to\n\t\t\"/views/\")\n\t- `runtimeMount` - the URL path where the minified Blade runtime is served\n\t\tto the browser (defaults to \"/blade/blade.js\"). Use `null` to disable\n\t\tthis functionality.\n\t- `pluginsMount` - the URL path where Blade plugins will be served to the\n\t\tbrowser (defaults to \"/blade/plugins/\"). Use `null` to disable this\n\t\tfunctionality.\n\t- `returnErrors` - if true, compilation errors are exposed to the client\n\t\t(i.e. passed to the callback function that was passed to\n\t\t`blade.Runtime.loadTemplate`); if false, compilation errors are passed\n\t\tto the [error-handling middleware]\n\t\t(http://expressjs.com/guide.html#error-handling). Defaults to\n\t\t`process.env.NODE_ENV == \"development\"` if unspecified.\n\t- `compileOptions` - options passed to `blade.compile()`. Defaults to:\n\n```javascript\n{\n\t'cache': process.env.NODE_ENV == \"production\",\n\t'minify': process.env.NODE_ENV == \"production\",\n\t'includeSource': process.env.NODE_ENV == \"development\"\n};\n````\n\n### blade.Compiler\n\nThe compiler itself. It has some useful methods and properties.\n\n### blade.Compiler.parse(string)\n\nJust generates the parse tree for the string. For debugging purposes only.\n\nExample using the API:\n\n```javascript\nvar blade = require('blade');\nblade.compile(\"string of blade\", options, function(err, tmpl) {\n\ttmpl(locals, function(err, html) {\n\t\tconsole.log(html);\n\t});\n});\n```\n\nHere is a sample Express application that uses Blade for server-side and client-side\ntemplates:\n\n```javascript\nvar express = require('express'),\n\tblade = require('blade');\nvar app = express.createServer();\napp.use(blade.middleware(__dirname + '/views') ); //for client-side templates\napp.use(express.static(__dirname + \"/public\") ); //maybe we have some static files\napp.set('views', __dirname + '/views'); //tells Express where our views are stored\napp.set('view engine', 'blade'); //Yes! Blade works with Express out of the box!\napp.get('/', function(req, res, next) {\n\tres.render('homepage');\n});\napp.listen(8000);\n```\n\nBrowser Usage\n-------------\n\nThe Blade runtime should work on every browser, and since Blade provides an\nExpress middleware for serving compiled templates to the browser ([see above]\n(#blademiddlewaresourcepath-options)), rendering Blade templates in the browser\nis a breeze.\n\nOnce you have the middleware setup, you can now serve your compiled Blade views\nto the client. Simply include the /blade/blade.js file in your `<script>`\ntags, and then call `blade.Runtime.loadTemplate`.\n\n### blade.Runtime.loadTemplate(filename, cb)\n\n- `filename` - the filename of the view you wish to retrieve, relative to the\n\t`sourcePath` you setup in the Blade middleware.\n- `cb` - your callback of the form `cb(err, tmpl)` where `tmpl` is your compiled\n\tBlade template. Call the template like this:\n\t`tmpl(locals, function(err, html) {...});`\n\nYour template will be stored in `blade.cachedViews` and will be cached until the\nuser reloads the page or navigates to another page.\n\nYes, included files work, too. Like magic.\n\nExample client-side JavaScript:\n\n```javascript\nblade.Runtime.loadTemplate(\"homepage.blade\", function(err, tmpl) {\n\ttmpl({'users': ['John', 'Joe']}, function(err, html) {\n\t\tconsole.log(html); //YAY! We have rendered HTML\n\t});\n});\n```\n\nAdditionally, you can set `blade.Runtime.options` to control how the templates are\nloaded:\n\n- `blade.Runtime.options.mount` - the URL path where you can request compiled views\n\t(defaults to \"/views/\")\n- `blade.Runtime.options.loadTimeout` - the maximum number of milliseconds to wait\n\tbefore `loadTemplate` throws an error (defaults to 15 seconds).\n\nAs a side note, you can override the `blade.Runtime.loadTemplate` function with\nyour own implementation.\n\nSimple Example\n--------------\n\nThe following Blade document ...\n\n```blade\n!!! 5\nhtml\n\thead\n\t\ttitle Blade\n\tbody\n\t\t#nav\n\t\t\tul\n\t\t\t\t- for(var i in nav)\n\t\t\t\t\tli\n\t\t\t\t\t\ta(href=nav[i])= i\n\t\t#content.center\n\t\t\th1 Blade is cool\n```\n\n... compiles to this JavaScript function ...\n\n```javascript\nfunction tmpl(locals,cb,__){__=__||[],__.r=__.r||blade.Runtime,__.func||(__.func={},__.blocks={}),__.locals=locals||{};with(__.locals){__.push(\"<!DOCTYPE html>\",\"<html\",\">\",\"<head\",\">\",\"<title\",\">\",\"Blade\",\"</title>\",\"</head>\",\"<body\",\">\",\"<div\",' id=\"nav\"',\">\",\"<ul\",\">\");for(var i in nav)__.push(\"<li\",\">\",\"<a\"),__.r.attrs({href:{v:nav[i],e:1}},__),__.push(\">\",__.r.escape(i),\"</a>\",\"</li>\");__.push(\"</ul>\",\"</div>\",\"<div\",' id=\"content\"',' class=\"center\"',\">\",\"<h1\",\">\",\"Blade is cool\",\"</h1>\",\"</div>\",\"</body>\",\"</html>\")}__.inc||__.r.done(__),cb(null,__.join(\"\"),__)}\n```\n\n... now you call the function like this...\n\n```javascript\ntmpl({\n\t'nav': {\n\t\t'Home': '/',\n\t\t'About Us': '/about',\n\t\t'Contact': '/contact'\n\t}\n}, function(err, html) {\n\tif(err) throw err;\n\tconsole.log(html);\n});\n```\n\n... and you get this (indented for readability):\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Blade</title>\n\t</head>\n\t<body>\n\t\t<div id=\"nav\">\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"/\">Home</a></li>\n\t\t\t\t<li><a href=\"/about\">About Us</a></li>\n\t\t\t\t<li><a href=\"/contact\">Contact</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div id=\"content\" class=\"center\">\n\t\t\t<h1>Blade is cool</h1>\n\t\t</div>\n\t</body>\n</html>\n```\n\nSyntax Highlighting\n-------------------\n\nThere are a few resources available to get syntax highlighting for your favorite text\neditor.\n\n- [Sublime Text 2](http://www.sublimetext.com/2):\n\thttps://github.com/kenvunz/js-blade-package (maybe thank kenvunz\n\t[here](https://github.com/bminer/node-blade/issues/78))\n- [Textmate](https://github.com/textmate/textmate): the syntax highlighting files for\n\tSublime Text 2 may also be compatible with Textmate? See the link above.\n- [Notepad++](http://notepad-plus-plus.org/): [notepad++.xml]\n\t(https://github.com/bminer/node-blade/blob/master/syntax-highlighting/notepad%2B%2B.xml)\n\nIf you find (or create yourself) syntax highlighting plugins for other text editors,\nplease write me, and I will post the links here. Or, simply submit a pull request.\n\nPlugins\n-------\n\n**Live UI**\n\nBlade provides a Live UI plugin that allows Blade to use the [Spark live page update\nengine](https://github.com/meteor/meteor/wiki/Spark) independently from Meteor.\n\nLive UI provides automatic two-way synchronization between your models and views on a\ngiven web page.  That is, when data in your Model is updated, the rendered Blade views\non the client's browser are automatically updated with the new content, and similarly,\nwhen a Blade view is rendered in the browser, the Blade [event handlers](#event-handlers)\ncan update data in the model.\n\n**Complete documentation for the Live UI plugin (including several examples)\ncan be found on the [Live UI Plugin wiki page]\n(https://github.com/bminer/node-blade/wiki/Live-UI-Blade-Plugin).**\n\n**definePropertyIE8**\n\nThis plugin is a prerequisite for the Live UI plugin if you plan on using Live UI in\nInternet Explorer 8.\n\nMeteor Support\n--------------\n\nBlade provides a [Meteor smart package](http://docs.meteor.com/#smartpackages)\nunder the `meteor` directory. At the time of this writing, Blade is not a part of the\nMeteor core smart package list.\n\nFortunately, an [Atmosphere smart package](https://atmosphere.meteor.com/package/blade)\nis available, which you can install using Meteorite.\n\nTo install Blade's smart package from Atmosphere, simply [install Meteorite]\n(https://atmosphere.meteor.com/wtf/app), navigate to your Meteor project directory,\nand type `mrt add blade`. Then, don't forget to run your project using `mrt` instead\nof `meteor`.\n\nAlso check out these Blade features that work well with Meteor:\n\n- [Preserve and constant regions](#preserve-and-constant-regions)\n- [Isolates](#isolates)\n- [Foreach](#foreach)\n\n**More documentation and examples for Meteor + Blade can be found [on this wiki page]\n(https://github.com/bminer/node-blade/wiki/Using-Blade-with-Meteor).**\n\nImplementation Details\n----------------------\n\n**PEG.js**\n\nThe Blade parser is built using [PEG.js](https://github.com/dmajda/pegjs).\nThanks to the PEG.js team for making this project much easier than I had\nanticipated! To modify the parser, simply change `./lib/parser/blade-grammer.pegjs`,\nand the new parser will be automatically built the next time you run tests.\n\n**Running tests**\n\nTo install all devDependencies, just do: `npm link` or install manually.\nTo run tests, ensure devDependencies are installed, then run: `npm test`\n\n**Compiler-runtime relationship**\n\nAlso, I'd like to mention here that the Blade compiler and Blade runtime are rather\nclosely coupled. Unfortunately, that means that templates compiled with an older\nBlade compiler might not be compatible with a newer runtime and vice versa.\nTo avoid issues, be sure that your Blade templates were compiled with the compiler of\nthe same version as the runtime on which they will run. If you think this is too\ninconvenient, please feel free to complain, but I probably will ignore you. :)\n\n<a name=\"fileIncludeDetails\"></a>\n**File Includes**\n\nIncluded Blade templates MUST be loaded synchronously, and if this is not possible, an\nerror will be thrown.  Obviously, when rendering views on the server, this is not a\nproblem since Node provides synchronous file system calls; however, on the client, it is\nonly possible to include a file synchronously when the file is already in the browser's\ncache.  When the name of the file to be included is known at compile-time (i.e. you are\nnot using a *dynamic filename include*), the compiler will notify the Blade middleware\nof a particular view's dependencies.  This allows the client-side template loader to\nalso load and cache any dependent views in advance, preventing any issues from occurring.\nNevertheless, when *dynamic filename includes* are used, the compiler has no way of\ndetermining which views will be included at runtime, and if a dynamically included view\nis not loaded into the browser's cache when the include statement is reached, the\nincluded view must be be loaded asynchronously and, as such, an error will be thrown.\n\nLoading and compiling files synchronously may temporarily reduce your application's\nresponsiveness, but because compiled views are often cached, this is not really much\nof an issue.\n\n**Event Handlers**\n\nEvent handlers in Blade work by injecting the event handler function as an HTML comment\ndirectly before the bound element.  Then, the appropriate event attribute (i.e.\nonclick, onchange, etc.) on the element is set to call `blade.Runtime.trigger`.  The\n`trigger` function basically grabs the HTML comment, passes the contents through eval(),\nand binds the event handler directly to the element.  This means that the event handlers\nwork on templates rendered on the browser or on the server. Everything gets wired up the\nfirst time that the event occurs on the browser.\n\nThe Blade runtime also keeps track of any event handlers bound to a specific element\nby assigning each element an 'id' attribute, if necessary.  When the view has\nfinished rendering, the Blade runtime will pass a bunch of information (blocks,\nfunctions, or event handlers that were defined, etc.) to the 3rd (undocumented) argument\nof the render callback function.  If you are rendering Blade templates on the browser,\nyou can access the list of event handlers and bind the defined event handler directly\nto the element by looking up the element by its 'id' instead of letting the `trigger`\nfunction do its magic.  The advantage of binding direclty to the defined event handler is\nthat (thanks to closures) you can still reference the locals that were passed to your\nview and modify them, as needed... directly from your event handler. This allows your view\ncode to automatically synchronize with your model, providing one-way view-to-model\nsynchronization capabilties. Very cool!  For examples of this and for more information,\ncheck out the [Live UI plugin]\n(https://github.com/bminer/node-blade/wiki/Live-UI-Blade-Plugin).\n\nBenchmarks\n----------\n\nSee the [Benchmark wiki page](https://github.com/bminer/node-blade/wiki/Benchmarks)\nfor more information.\n\nLicense\n-------\n\nSee the [LICENSE.txt file](https://raw.github.com/bminer/node-blade/master/LICENSE.txt).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bminer/node-blade/issues"
  },
  "_id": "blade@3.2.7",
  "_from": "blade@"
}
